#Copy User Profile to Network Share
$UserToCopy = "Controller"; $YourUNCPath = "\\127.0.0.1\test2"; $EncodedScript = ""; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; C:\Migrate.ps1 -c $UserToCopy W:; net use W: /delete

#Copy All User Profiles to Network Share
$YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedScript = ""; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; Get-Childitem C:\Users | Foreach-Object{if(!($_.directory)){if ($_.Name -ne "Public"){C:\Migrate.ps1 -c $_ W:}}}; net use W: /delete

#Copy User Profile by Computer Name as Defined in CSV
$YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedCSV = "MY_BASE64_ENCODED_CSV"; $DecodedCSV = [System.Convert]::FromBase64String($EncodedCSV); Set-Content -Path C:\UserComputers.csv -Value $DecodedCSV -Encoding Byte; $UserToCopy = $((Import-Csv C:\UserComputers.csv | Where-Object {$_.Computer -in $((hostname))} | Select User)).User; Write-Host "Copying $UserToCopy"; $EncodedScript = ""; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; C:\Migrate.ps1 -c $UserToCopy W:; net use W: /delete

#Paste User Profile from Network Share
$ProfileToPaste= "PROFILENAME"; $UserToPasteTo = "USERNAME"; $YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedScript = ""; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; C:\Migrate.ps1 -p $ProfileToPaste W: $UserToPasteTo; net use W: /delete
