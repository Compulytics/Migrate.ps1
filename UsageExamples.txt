#Copy User Profile to Network Share
$UserToCopy = "USERNAME"; $YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedScript = "ZnVuY3Rpb24gQ29weUZpbGVzew0KCXBhcmFtKFtzdHJpbmddJFNyYywgW3N0cmluZ10kRm9sZGVyKQ0KCWlmICghKFRlc3QtUGF0aCAtUGF0aCAkRGVzdFwkVXNyXCRGb2xkZXIpKXsNCgkJTmV3LUl0ZW0gJERlc3RcJFVzclwkRm9sZGVyIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbA0KCX0NCglHZXQtQ2hpbGRJdGVtICRTcmMgLVJlY3Vyc2UgLUZvcmNlIHwgU29ydC1PYmplY3QgLVByb3BlcnR5IEZ1bGxOYW1lIC1EZXNjZW5kaW5nIHwgRm9yRWFjaC1PYmplY3Qgew0KCQlpZiAoJF8uRGlyZWN0b3J5KXsNCgkJCSRTdHJEaXIgPSBbc3RyaW5nXSRfLkRpcmVjdG9yeQ0KCQkJJFN1YkRpcnMgPSAkU3RyRGlyLnJlcGxhY2UoJFNyYywiIikNCgkJCWlmICghKFRlc3QtUGF0aCAtUGF0aCAkRGVzdFN1YiRTdWJEaXJzKSl7DQoJCQkJJEZ1bGxQYXRoID0gIiREZXN0U3ViJFN1YkRpcnMiDQoJCQkJJERpcmVjdG9yeUFycmF5ID0gJEZ1bGxQYXRoLnNwbGl0KCJcIikNCgkJCQkkRGlyZWN0b3J5QnVmZmVyID0gIiINCgkJCQkkRGlyZWN0b3J5QXJyYXkgfCBGb3JFYWNoLU9iamVjdCB7DQoJCQkJCSREaXJlY3RvcnlCdWZmZXIgKz0gIiRfXCINCgkJCQkJaWYgKCEoVGVzdC1QYXRoICREaXJlY3RvcnlCdWZmZXIpKXsNCgkJCQkJCU5ldy1JdGVtICREaXJlY3RvcnlCdWZmZXIgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgfCBPdXQtTnVsbA0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCSRGaWxlID0gJF8uRnVsbE5hbWUNCgkJJERTVEZpbGVOYW1lID0gJEZpbGUuUmVwbGFjZSgkU3JjLCIiKQ0KCQlpZiAoIShUZXN0LVBhdGggJERlc3RTdWIkRFNURmlsZU5hbWUpKXsNCgkJCUNvcHktSXRlbSAiJEZpbGUiIC1EZXN0aW5hdGlvbiAiJERlc3RTdWIkRFNURmlsZU5hbWUiIC1Gb3JjZQ0KCQl9DQoJfQ0KfQ0KZnVuY3Rpb24gUGFzdGVGaWxlc3sNCglwYXJhbShbc3RyaW5nXSRSZXBvLCBbc3RyaW5nXSRGb2xkZXIpDQoJQ29weS1JdGVtICRSZXBvXCRVc3JcJEZvbGRlciAkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlIC1SZWN1cnNlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KfQ0KZnVuY3Rpb24gVGFrZVByb2ZpbGUoJFVzciwgJERlc3Qpew0KCWlmICghKCRDdXJyZW50VXNlclByaW5jaXBhbC5Jc0luUm9sZShbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NCdWlsdEluUm9sZV06OkFkbWluaXN0cmF0b3IpKSl7DQoJCWlmICghKCRVc3IgLWVxICRFbnY6VXNlck5hbWUpKXsNCgkJCVdyaXRlLUhvc3QgIkVSUk9SOiBObyBBZG1pbmlzdHJhdG9yIGFjY2Vzcy4gQ2FuIG9ubHkgY29weSBvdGhlciBwcm9maWxlcyB3aGVuIHJ1biBhcyBBZG1pbmlzdHJhdG9yISINCgkJCXNsZWVwIDUNCgkJCWV4aXQNCgkJfQ0KCX0NCgkkRm9sZGVyc1RvQ29weSA9IEAoIkNvbnRhY3RzIiwiRGVza3RvcCIsIkRvY3VtZW50cyIsIkRvd25sb2FkcyIsIkZhdm9yaXRlcyIsIk11c2ljIiwiUGljdHVyZXMiLCJWaWRlb3MiKQ0KCWlmIChUZXN0LVBhdGggLVBhdGggJERlc3RcJFVzcil7DQoJCVdyaXRlLUhvc3QgIlVzZXIgSUQgQWxyZWFkeSBFeGlzdHMiDQoJCSRPdmVyd3JpdGUgPSBSZWFkLUhvc3QgIk92ZXJ3cml0ZSBleGlzdGluZyBkYXRhPyAoeSxuKSINCgkJaWYgKCRPdmVyd3JpdGUgLWVxICJ5Iil7DQoJCQlXcml0ZS1Ib3N0ICJPdmVyd3JpdGluZy4uLiINCgkJCXJlbW92ZS1pdGVtICREZXN0XCRVc3IgLUZvcmNlIC1SZWN1cnNlDQoJCX0NCgkJZWxzZXsNCgkJCWV4aXQNCgkJfQ0KCX0NCgllbHNlew0KCQlOZXctSXRlbSAkRGVzdFwkVXNyIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbA0KCX0NCglXcml0ZS1Ib3N0ICJDb3B5aW5nIEhvbWUgRm9sZGVyIENvbnRlbnRzIg0KCUdldC1DaGlsZEl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcIHwgRm9yZWFjaC1PYmplY3R7DQoJCWlmKCRfLkRpcmVjdG9yeSl7DQoJCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXCRfIiAtRGVzdGluYXRpb24gIiREZXN0XCRVc3JcIg0KCQl9DQoJCWVsc2V7DQoJCQlpZiAoIShUZXN0LVBhdGggJERlc3RcJFVzclxSb290Rm9sZGVycykpew0KCQkJCU5ldy1JdGVtICREZXN0XCRVc3JcUm9vdEZvbGRlcnMgLUl0ZW1UeXBlIERpcmVjdG9yeSB8IE91dC1OdWxsDQoJCQl9DQoJCQlpZiAoW3N0cmluZ10kXyAtbmUgIkNvbnRhY3RzIiAtYW5kIFtzdHJpbmddJF8gLW5lICJEZXNrdG9wIiAtYW5kIFtzdHJpbmddJF8gLW5lICJEb2N1bWVudHMiIC1hbmQgW3N0cmluZ10kXyAtbmUgIkRvd25sb2FkcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiRmF2b3JpdGVzIiAtYW5kIFtzdHJpbmddJF8gLW5lICJNdXNpYyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiUGljdHVyZXMiIC1hbmQgW3N0cmluZ10kXyAtbmUgIlZpZGVvcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiM0QgT2JqZWN0cyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiTGlua3MiIC1hbmQgW3N0cmluZ10kXyAtbmUgIk9uZURyaXZlIiAtYW5kIFtzdHJpbmddJF8gLW5lICJTYXZlZCBHYW1lcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiU2VhcmNoZXMiKXsNCgkJCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXCRfIiAtUmVjdXJzZSAtRGVzdGluYXRpb24gIiREZXN0XCRVc3JcUm9vdEZvbGRlcnMiDQoJCQl9DQoJCX0NCgl9DQoJJEZvbGRlcnNUb0NvcHkgfCBGb3JlYWNoLU9iamVjdHsNCgkJV3JpdGUtSG9zdCAiQ29weWluZyAkXyBGb2xkZXIiDQoJCSREZXN0U3ViID0gIiREZXN0XCRVc3JcJF8iDQoJCUNvcHlGaWxlcyAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcJF8iICIkXyINCgl9DQoJJEN1cnJlbnRQcm9jZXNzZXMgPSAkKChnZXQtd21pb2JqZWN0IHdpbjMyX3Byb2Nlc3MgLWNvbXB1dGVybmFtZSAkKChob3N0bmFtZSkpIHwgU2VsZWN0LU9iamVjdCBQcm9jZXNzTmFtZSkpDQoJaWYgKCRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJjaHJvbWUuZXhlIikgLW9yICRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJtc2VkZ2UuZXhlIikgLW9yICRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJmaXJlZm94Iikpew0KCQlHZXQtUHJvY2VzcyAtTmFtZSBjaHJvbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTdG9wLVByb2Nlc3MgLUZvcmNlDQoJCUdldC1Qcm9jZXNzIC1OYW1lIG1zZWRnZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgkJR2V0LVByb2Nlc3MgLU5hbWUgZmlyZWZveCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgl9DQoJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0Iil7DQoJCVdyaXRlLUhvc3QgIkNvcHlpbmcgQ2hyb21lIERhdGEiDQoJCUNvcHktSXRlbSAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0IiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxDaHJvbWVEYXRhXERlZmF1bHQgLVJlY3Vyc2UNCgl9DQoJV3JpdGUtSG9zdCAiQ29weWluZyBFZGdlIERhdGEiDQoJQ29weS1JdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJFVzclxBcHBEYXRhXExvY2FsXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YVxEZWZhdWx0IiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxFZGdlRGF0YVxEZWZhdWx0IC1SZWN1cnNlDQoJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxQcm9maWxlcyIpew0KCQlXcml0ZS1Ib3N0ICJDb3B5aW5nIEZpcmVmb3ggRGF0YSINCgkJQ29weS1JdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJFVzclxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyAtUmVjdXJzZQ0KCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXEFwcERhdGFcUm9hbWluZ1xNb3ppbGxhXEZpcmVmb3hccHJvZmlsZXMuaW5pIiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxGaXJlZm94RGF0YVxwcm9maWxlcy5pbmkNCgl9DQp9DQpmdW5jdGlvbiBQdXRQcm9maWxlKCRVc3IsICRSZXBvLCAkRGVzdFByb2ZpbGUpew0KCSRWYWxpZFBhc3RlUHJvZmlsZXMgPSBAKCkNCgkkRm9sZGVyc1RvUGFzdGUgPSBAKCJSb290Rm9sZGVyc1wqIiwiQ29udGFjdHMiLCJEZXNrdG9wIiwiRG9jdW1lbnRzIiwiRG93bmxvYWRzIiwiRmF2b3JpdGVzIiwiTXVzaWMiLCJQaWN0dXJlcyIsIlZpZGVvcyIpDQoJaWYgKFRlc3QtUGF0aCAkUmVwbyl7DQoJCWlmIChUZXN0LVBhdGggJFJlcG9cJFVzcil7DQoJCQlXcml0ZS1Ib3N0ICJQYXN0aW5nIEhvbWUgRm9sZGVyIENvbnRlbnRzIg0KCQkJR2V0LUNoaWxkSXRlbSAkUmVwb1wkVXNyIHwgRm9yZWFjaC1PYmplY3R7DQoJCQkJaWYoJF8uRGlyZWN0b3J5KXsNCgkJCQkJQ29weS1JdGVtICIkUmVwb1wkVXNyXCRfIiAtRGVzdGluYXRpb24gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcIg0KCQkJCX0NCgkJCX0NCgkJCSRGb2xkZXJzVG9wYXN0ZSB8IEZvcmVhY2gtT2JqZWN0ew0KCQkJCWlmIChbc3RyaW5nXSRfIC1lcSAiUm9vdEZvbGRlcnNcKiIpew0KCQkJCQlXcml0ZS1Ib3N0ICJQYXN0aW5nIEhvbWUgRm9sZGVyIEZvbGRlcnMiDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIlBhc3RpbmcgJF8gRm9sZGVyIg0KCQkJCX0NCgkJCQlQYXN0ZUZpbGVzICIkUmVwbyIgIiRfIg0KCQkJfQ0KCQkJJEN1cnJlbnRQcm9jZXNzZXMgPSAkKChnZXQtd21pb2JqZWN0IHdpbjMyX3Byb2Nlc3MgLWNvbXB1dGVybmFtZSAkKChob3N0bmFtZSkpIHwgU2VsZWN0LU9iamVjdCBQcm9jZXNzTmFtZSkpDQoJCQlpZiAoJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoImNocm9tZS5leGUiKSAtb3IgJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoIm1zZWRnZS5leGUiKSAtb3IgJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoImZpcmVmb3giKSl7DQoJCQkJR2V0LVByb2Nlc3MgLU5hbWUgY2hyb21lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZQ0KCQkJCUdldC1Qcm9jZXNzIC1OYW1lIG1zZWRnZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgkJCQlHZXQtUHJvY2VzcyAtTmFtZSBmaXJlZm94IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZQ0KCQkJfQ0KCQkJaWYgKFRlc3QtUGF0aCAkUmVwb1wkVXNyXENocm9tZURhdGFcRGVmYXVsdCl7DQoJCQkJV3JpdGUtSG9zdCAiUGFzdGluZyBDaHJvbWUgRGF0YSBGb2xkZXIiDQoJCQkJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXExvY2FsXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHQiKXsNCgkJCQkJcmVtb3ZlLWl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0IiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQl9DQoJCQkJQ29weS1JdGVtICRSZXBvXCRVc3JcQ2hyb21lRGF0YVxEZWZhdWx0ICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcTG9jYWxcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdCIgLUZvcmNlIC1SZWN1cnNlDQoJCQl9DQoNCgkJCVdyaXRlLUhvc3QgIlBhc3RpbmcgRWRnZSBEYXRhIEZvbGRlciINCgkJCWlmIChUZXN0LVBhdGggIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxMb2NhbFxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGFcRGVmYXVsdCIpew0KCQkJCXJlbW92ZS1pdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcTG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXERlZmF1bHQiIC1Gb3JjZSAtUmVjdXJzZQ0KCQkJfQ0KCQkJQ29weS1JdGVtICRSZXBvXCRVc3JcRWRnZURhdGFcRGVmYXVsdCAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXExvY2FsXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YVxEZWZhdWx0IiAtRm9yY2UgLVJlY3Vyc2UNCgkJCWlmIChUZXN0LVBhdGggJFJlcG9cJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyl7DQoJCQkJV3JpdGUtSG9zdCAiUGFzdGluZyBGaXJlZm94IERhdGEgRm9sZGVyIg0KCQkJCWlmIChUZXN0LVBhdGggIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxQcm9maWxlcyIpew0KCQkJCQlyZW1vdmUtaXRlbSAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQkJcmVtb3ZlLWl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxwcm9maWxlcy5pbmkiIC1Gb3JjZQ0KCQkJCX0NCgkJCQlDb3B5LUl0ZW0gJFJlcG9cJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQlDb3B5LUl0ZW0gJFJlcG9cJFVzclxGaXJlZm94RGF0YVxwcm9maWxlcy5pbmkgICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcUm9hbWluZ1xNb3ppbGxhXEZpcmVmb3hccHJvZmlsZXMuaW5pIg0KCQkJfQ0KCQl9DQoJCWVsc2V7DQoJCQlXcml0ZS1Ib3N0ICJVc2VyIFByb2ZpbGUgTm90IEZvdW5kISINCgkJCXNsZWVwIDUNCgkJCWV4aXQNCgkJfQ0KCX0NCgllbHNlew0KCQlXcml0ZS1Ib3N0ICJJbnZhbGlkIFNvdXJjZSBQYXRoISINCgkJc2xlZXAgNQ0KCQlleGl0DQoJfQ0KfQ0KI1NUQVJUIEhFUkUNCiRTeXN0ZW1Ecml2ZSA9IChHZXQtV21pT2JqZWN0IFdpbjMyX09wZXJhdGluZ1N5c3RlbSkuU3lzdGVtRHJpdmUNCiRDdXJyZW50VXNlclByaW5jaXBhbCA9IE5ldy1PYmplY3QgU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NQcmluY2lwYWwoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpDQppZiAoW3N0cmluZ10kYXJnc1swXSAtZXEgIi1jIil7DQoJJFVzciA9ICRFbnY6VXNlck5hbWUNCgkkTW9kZSA9ICJjIg0KfQ0KZWxzZWlmIChbc3RyaW5nXSRhcmdzWzBdIC1lcSAiLXAiKXsNCgkkTW9kZSA9ICJwIg0KfQ0KZWxzZWlmIChbc3RyaW5nXSRhcmdzWzBdIC1lcSAiLWgiKXsNCglXcml0ZS1Ib3N0ICJVc2FnZToiDQoJV3JpdGUtSG9zdCAiLlxUaGlzUHJvZ3JhbS5wczEgW09QVElPTlNdIDxQcm9maWxlIHRvIENvcHkgb3IgUGFzdGUgZnJvbT4gPFNvdXJjZSBvciBEZXN0aW5hdGlvbiBQYXRoPiA8UHJvZmlsZSB0byBQYXN0ZSB0bz4iDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgT1BUSU9OUzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgLWMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3B5IFByb2ZpbGUgfHwiDQoJV3JpdGUtSG9zdCAifHwgLXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhc3RlIFByb2ZpbGUgfHwiDQoJV3JpdGUtSG9zdCAifHwgLWggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmludCBUaGlzIFBhZ2UgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgTk9URTogPFByb2ZpbGUgdG8gUGFzdGUgdG8+IGlzIG9ubHkgdmFsaWQgaW4gUGFzdGUgbW9kZSEgICAgICAgICAgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJZXhpdA0KfQ0KZWxzZXsNCgkkTW9kZSA9IFJlYWQtSG9zdCAiV291bGQgeW91IGxpa2UgdG8gY29weSBvciBwYXN0ZSBwcm9maWxlPyAoYyxwKSINCn0NCmlmICgkTW9kZSAtZXEgImMiKXsNCglpZiAoW3N0cmluZ10kYXJnc1sxXSl7DQoJCWlmIChbc3RyaW5nXSRhcmdzWzJdKXsNCgkJCWlmIChUZXN0LVBhdGggJGFyZ3NbMl0pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnMgfCBGb3JlYWNoLU9iamVjdHtpZighKCRfLmRpcmVjdG9yeSkpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucyhbc3RyaW5nXSRhcmdzWzFdKSl7DQoJCQkJCVRha2VQcm9maWxlICRhcmdzWzFdICRhcmdzWzJdDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJc2xlZXAgNQ0KCQkJCQlleGl0DQoJCQkJfQ0KCQkJfQ0KCQkJZWxzZXsNCgkJCQlOZXctSXRlbSAtUGF0aCAkYXJnc1syXSAtSXRlbVR5cGUgIkRpcmVjdG9yeSIgfCBPdXQtTnVsbA0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbMV0pKXsNCgkJCQkJVGFrZVByb2ZpbGUgJFVzciAkYXJnc1syXQ0KCQkJCX0NCgkJCQllbHNlew0KCQkJCQlXcml0ZS1Ib3N0ICJFUlJPUjogSW52YWxpZCBzb3VyY2UgcHJvZmlsZSBzZWxlY3RlZCEiDQoJCQkJCXNsZWVwIDUNCgkJCQkJZXhpdA0KCQkJCX0NCgkJCX0NCgkJfQ0KCQllbHNlew0KCQkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHRoZSBwYXRoIG9mIHRoZSByZXBvc2l0b3J5IHdoZXJlIHlvdSB3aWxsIHN0b3JlIHlvdXIgcHJvZmlsZSINCgkJCWlmIChUZXN0LVBhdGggJFJlcG8pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnMgfCBGb3JlYWNoLU9iamVjdHtpZighKCRfLmRpcmVjdG9yeSkpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucyhbc3RyaW5nXSRhcmdzWzFdKSl7DQoJCQkJCVRha2VQcm9maWxlICRhcmdzWzFdICRSZXBvDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJc2xlZXAgNQ0KCQkJCQlleGl0DQoJCQkJfQ0KCQkJfQ0KCQkJZWxzZXsNCgkJCQlOZXctSXRlbSAtUGF0aCAkUmVwbyAtSXRlbVR5cGUgIkRpcmVjdG9yeSIgfCBPdXQtTnVsbA0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbMV0pKXsNCgkJCQkJVGFrZVByb2ZpbGUgJGFyZ3NbMV0gJFJlcG8NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQl9DQoJCX0NCgl9DQoJZWxzZXsNCgkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHRoZSBwYXRoIG9mIHRoZSByZXBvc2l0b3J5IHdoZXJlIHlvdSB3aWxsIHN0b3JlIHlvdXIgcHJvZmlsZSINCgkJaWYgKFRlc3QtUGF0aCAkUmVwbyl7DQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRTeXN0ZW1Ecml2ZVxVc2VycyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCVdyaXRlLUhvc3QgIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSINCgkJCSRVc3IgPSBSZWFkLUhvc3QgIldoaWNoIHByb2ZpbGUgd291bGQgeW91IGxpa2UgdG8gY29weT8iDQoJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJFVzcikpew0KCQkJCVRha2VQcm9maWxlICRVc3IgJFJlcG8NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCU5ldy1JdGVtIC1QYXRoICRSZXBvIC1JdGVtVHlwZSAiRGlyZWN0b3J5IiB8IE91dC1OdWxsDQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRTeXN0ZW1Ecml2ZVxVc2VycyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCVdyaXRlLUhvc3QgIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSINCgkJCSRVc3IgPSBSZWFkLUhvc3QgIldoaWNoIHByb2ZpbGUgd291bGQgeW91IGxpa2UgdG8gY29weT8iDQoJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJFVzcikpew0KCQkJCVRha2VQcm9maWxlICRVc3IgJFJlcG8NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgl9DQp9DQplbHNlaWYgKCRNb2RlIC1lcSAicCIpew0KCWlmIChbc3RyaW5nXSRhcmdzWzFdKXsNCgkJaWYgKFtzdHJpbmddJGFyZ3NbMl0pew0KCQkJaWYgKFtzdHJpbmddJGFyZ3NbM10pew0KCQkJCWlmIChUZXN0LVBhdGggJGFyZ3NbMl0pew0KCQkJCQkkVmFsaWRTb3VyY2VQcm9maWxlcyA9IEAoKQ0KCQkJCQlHZXQtQ2hpbGRpdGVtICRhcmdzWzJdIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXskVmFsaWRTb3VyY2VQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX0NCgkJCQkJaWYgKCEoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoW3N0cmluZ10kYXJnc1sxXSkpKXsNCgkJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJCXNsZWVwIDUNCgkJCQkJCWV4aXQNCgkJCQkJfQ0KCQkJCQkkVmFsaWREZXN0UHJvZmlsZXMgPSBAKCkNCgkJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnNcIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJCWlmICgkVmFsaWREZXN0UHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbM10pKXsNCgkJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJGFyZ3NbMl0gJGFyZ3NbM10NCgkJCQkJfQ0KCQkJCQllbHNlew0KCQkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgZGVzdGluYXRpb24gcHJvZmlsZSBzZWxlY3RlZCEiDQoJCQkJCQlzbGVlcCA1DQoJCQkJCQlleGl0DQoJCQkJCX0NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHBhdGghIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQl9DQoJCQllbHNlew0KCQkJCVdyaXRlLUhvc3QgJGFyZ3NbMl0NCgkJCQlpZiAoVGVzdC1QYXRoICRhcmdzWzJdKXsNCgkJCQkJJFZhbGlkU291cmNlUHJvZmlsZXMgPSBAKCkNCgkJCQkJR2V0LUNoaWxkaXRlbSAkYXJnc1syXSB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7JFZhbGlkU291cmNlUHJvZmlsZXMgKz0gJF8uVG9TdHJpbmcoKX19DQoJCQkJCWlmICghKCRWYWxpZFNvdXJjZVByb2ZpbGVzLkNvbnRhaW5zKFtzdHJpbmddJGFyZ3NbMV0pKSl7DQoJCQkJCQlXcml0ZS1Ib3N0ICJFUlJPUjogSW52YWxpZCBzb3VyY2UgcHJvZmlsZSBzZWxlY3RlZC4iDQoJCQkJCQlzbGVlcCA1DQoJCQkJCQlleGl0DQoJCQkJCX0NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHBhdGghIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJGFyZ3NbMl0gJFVzckRlc3QNCgkJCQl9DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCSRSZXBvID0gUmVhZC1Ib3N0ICJFbnRlciBwcm9maWxlIHJlcG9zaXRvcnkgcGF0aCINCgkJCWlmIChUZXN0LVBhdGggJFJlcG8pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkUmVwbyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXskVmFsaWRTb3VyY2VQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJaWYgKCEoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoW3N0cmluZ10kYXJnc1sxXSkpKXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgcHJvZmlsZSBzb3VyY2Ugc2VsZWN0ZWQhIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJFJlcG8gJFVzckRlc3QNCgkJCQl9DQoJCQl9DQoJCX0NCgl9DQoJZWxzZXsNCgkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHByb2ZpbGUgcmVwb3NpdG9yeSBwYXRoIg0KCQlpZiAoVGVzdC1QYXRoICRSZXBvKXsNCgkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRSZXBvIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJJFVzclNvdXJjZSA9IFJlYWQtSG9zdCAiV2hpY2ggcHJvZmlsZSB3b3VsZCB5b3UgbGlrZSB0byBwYXN0ZSBmcm9tPyINCgkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucygkVXNyU291cmNlKSl7DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJFVzclNvdXJjZSAkUmVwbyAkVXNyRGVzdA0KCQkJCX0NCgkJCQllbHNlew0KCQkJCQlXcml0ZS1Ib3N0ICJJbnZhbGlkIFNlbGVjdGlvbiEiDQoJCQkJCXNsZWVwIDUNCgkJCQkJZXhpdA0KCQkJCX0NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiSW52YWxpZCBTZWxlY3Rpb24hIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCVdyaXRlLUhvc3QgIkludmFsaWQgcHJvZmlsZSByZXBvc2l0b3J5IHBhdGghIg0KCQkJc2xlZXAgNQ0KCQkJZXhpdA0KCQl9DQoJfQ0KfQ0KZWxzZXsNCglXcml0ZS1Ib3N0ICJJbnZhbGlkIFNlbGVjdGlvbiEiDQoJc2xlZXAgNQ0KCWV4aXQNCn0NCldyaXRlLUhvc3QgIkRvbmUiDQojRU5EIEhFUkU="; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; C:\Migrate.ps1 -c $UserToCopy W:; net use W: /delete

#Copy All User Profiles to Network Share
$YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedScript = "ZnVuY3Rpb24gQ29weUZpbGVzew0KCXBhcmFtKFtzdHJpbmddJFNyYywgW3N0cmluZ10kRm9sZGVyKQ0KCWlmICghKFRlc3QtUGF0aCAtUGF0aCAkRGVzdFwkVXNyXCRGb2xkZXIpKXsNCgkJTmV3LUl0ZW0gJERlc3RcJFVzclwkRm9sZGVyIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbA0KCX0NCglHZXQtQ2hpbGRJdGVtICRTcmMgLVJlY3Vyc2UgLUZvcmNlIHwgU29ydC1PYmplY3QgLVByb3BlcnR5IEZ1bGxOYW1lIC1EZXNjZW5kaW5nIHwgRm9yRWFjaC1PYmplY3Qgew0KCQlpZiAoJF8uRGlyZWN0b3J5KXsNCgkJCSRTdHJEaXIgPSBbc3RyaW5nXSRfLkRpcmVjdG9yeQ0KCQkJJFN1YkRpcnMgPSAkU3RyRGlyLnJlcGxhY2UoJFNyYywiIikNCgkJCWlmICghKFRlc3QtUGF0aCAtUGF0aCAkRGVzdFN1YiRTdWJEaXJzKSl7DQoJCQkJJEZ1bGxQYXRoID0gIiREZXN0U3ViJFN1YkRpcnMiDQoJCQkJJERpcmVjdG9yeUFycmF5ID0gJEZ1bGxQYXRoLnNwbGl0KCJcIikNCgkJCQkkRGlyZWN0b3J5QnVmZmVyID0gIiINCgkJCQkkRGlyZWN0b3J5QXJyYXkgfCBGb3JFYWNoLU9iamVjdCB7DQoJCQkJCSREaXJlY3RvcnlCdWZmZXIgKz0gIiRfXCINCgkJCQkJaWYgKCEoVGVzdC1QYXRoICREaXJlY3RvcnlCdWZmZXIpKXsNCgkJCQkJCU5ldy1JdGVtICREaXJlY3RvcnlCdWZmZXIgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgfCBPdXQtTnVsbA0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCSRGaWxlID0gJF8uRnVsbE5hbWUNCgkJJERTVEZpbGVOYW1lID0gJEZpbGUuUmVwbGFjZSgkU3JjLCIiKQ0KCQlpZiAoIShUZXN0LVBhdGggJERlc3RTdWIkRFNURmlsZU5hbWUpKXsNCgkJCUNvcHktSXRlbSAiJEZpbGUiIC1EZXN0aW5hdGlvbiAiJERlc3RTdWIkRFNURmlsZU5hbWUiIC1Gb3JjZQ0KCQl9DQoJfQ0KfQ0KZnVuY3Rpb24gUGFzdGVGaWxlc3sNCglwYXJhbShbc3RyaW5nXSRSZXBvLCBbc3RyaW5nXSRGb2xkZXIpDQoJQ29weS1JdGVtICRSZXBvXCRVc3JcJEZvbGRlciAkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlIC1SZWN1cnNlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KfQ0KZnVuY3Rpb24gVGFrZVByb2ZpbGUoJFVzciwgJERlc3Qpew0KCWlmICghKCRDdXJyZW50VXNlclByaW5jaXBhbC5Jc0luUm9sZShbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NCdWlsdEluUm9sZV06OkFkbWluaXN0cmF0b3IpKSl7DQoJCWlmICghKCRVc3IgLWVxICRFbnY6VXNlck5hbWUpKXsNCgkJCVdyaXRlLUhvc3QgIkVSUk9SOiBObyBBZG1pbmlzdHJhdG9yIGFjY2Vzcy4gQ2FuIG9ubHkgY29weSBvdGhlciBwcm9maWxlcyB3aGVuIHJ1biBhcyBBZG1pbmlzdHJhdG9yISINCgkJCXNsZWVwIDUNCgkJCWV4aXQNCgkJfQ0KCX0NCgkkRm9sZGVyc1RvQ29weSA9IEAoIkNvbnRhY3RzIiwiRGVza3RvcCIsIkRvY3VtZW50cyIsIkRvd25sb2FkcyIsIkZhdm9yaXRlcyIsIk11c2ljIiwiUGljdHVyZXMiLCJWaWRlb3MiKQ0KCWlmIChUZXN0LVBhdGggLVBhdGggJERlc3RcJFVzcil7DQoJCVdyaXRlLUhvc3QgIlVzZXIgSUQgQWxyZWFkeSBFeGlzdHMiDQoJCSRPdmVyd3JpdGUgPSBSZWFkLUhvc3QgIk92ZXJ3cml0ZSBleGlzdGluZyBkYXRhPyAoeSxuKSINCgkJaWYgKCRPdmVyd3JpdGUgLWVxICJ5Iil7DQoJCQlXcml0ZS1Ib3N0ICJPdmVyd3JpdGluZy4uLiINCgkJCXJlbW92ZS1pdGVtICREZXN0XCRVc3IgLUZvcmNlIC1SZWN1cnNlDQoJCX0NCgkJZWxzZXsNCgkJCWV4aXQNCgkJfQ0KCX0NCgllbHNlew0KCQlOZXctSXRlbSAkRGVzdFwkVXNyIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbA0KCX0NCglXcml0ZS1Ib3N0ICJDb3B5aW5nIEhvbWUgRm9sZGVyIENvbnRlbnRzIg0KCUdldC1DaGlsZEl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcIHwgRm9yZWFjaC1PYmplY3R7DQoJCWlmKCRfLkRpcmVjdG9yeSl7DQoJCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXCRfIiAtRGVzdGluYXRpb24gIiREZXN0XCRVc3JcIg0KCQl9DQoJCWVsc2V7DQoJCQlpZiAoIShUZXN0LVBhdGggJERlc3RcJFVzclxSb290Rm9sZGVycykpew0KCQkJCU5ldy1JdGVtICREZXN0XCRVc3JcUm9vdEZvbGRlcnMgLUl0ZW1UeXBlIERpcmVjdG9yeSB8IE91dC1OdWxsDQoJCQl9DQoJCQlpZiAoW3N0cmluZ10kXyAtbmUgIkNvbnRhY3RzIiAtYW5kIFtzdHJpbmddJF8gLW5lICJEZXNrdG9wIiAtYW5kIFtzdHJpbmddJF8gLW5lICJEb2N1bWVudHMiIC1hbmQgW3N0cmluZ10kXyAtbmUgIkRvd25sb2FkcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiRmF2b3JpdGVzIiAtYW5kIFtzdHJpbmddJF8gLW5lICJNdXNpYyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiUGljdHVyZXMiIC1hbmQgW3N0cmluZ10kXyAtbmUgIlZpZGVvcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiM0QgT2JqZWN0cyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiTGlua3MiIC1hbmQgW3N0cmluZ10kXyAtbmUgIk9uZURyaXZlIiAtYW5kIFtzdHJpbmddJF8gLW5lICJTYXZlZCBHYW1lcyIgLWFuZCBbc3RyaW5nXSRfIC1uZSAiU2VhcmNoZXMiKXsNCgkJCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXCRfIiAtUmVjdXJzZSAtRGVzdGluYXRpb24gIiREZXN0XCRVc3JcUm9vdEZvbGRlcnMiDQoJCQl9DQoJCX0NCgl9DQoJJEZvbGRlcnNUb0NvcHkgfCBGb3JlYWNoLU9iamVjdHsNCgkJV3JpdGUtSG9zdCAiQ29weWluZyAkXyBGb2xkZXIiDQoJCSREZXN0U3ViID0gIiREZXN0XCRVc3JcJF8iDQoJCUNvcHlGaWxlcyAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcJF8iICIkXyINCgl9DQoJJEN1cnJlbnRQcm9jZXNzZXMgPSAkKChnZXQtd21pb2JqZWN0IHdpbjMyX3Byb2Nlc3MgLWNvbXB1dGVybmFtZSAkKChob3N0bmFtZSkpIHwgU2VsZWN0LU9iamVjdCBQcm9jZXNzTmFtZSkpDQoJaWYgKCRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJjaHJvbWUuZXhlIikgLW9yICRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJtc2VkZ2UuZXhlIikgLW9yICRDdXJyZW50UHJvY2Vzc2VzLlByb2Nlc3NOYW1lLkNvbnRhaW5zKCJmaXJlZm94Iikpew0KCQlHZXQtUHJvY2VzcyAtTmFtZSBjaHJvbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTdG9wLVByb2Nlc3MgLUZvcmNlDQoJCUdldC1Qcm9jZXNzIC1OYW1lIG1zZWRnZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgkJR2V0LVByb2Nlc3MgLU5hbWUgZmlyZWZveCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgl9DQoJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0Iil7DQoJCVdyaXRlLUhvc3QgIkNvcHlpbmcgQ2hyb21lIERhdGEiDQoJCUNvcHktSXRlbSAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0IiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxDaHJvbWVEYXRhXERlZmF1bHQgLVJlY3Vyc2UNCgl9DQoJV3JpdGUtSG9zdCAiQ29weWluZyBFZGdlIERhdGEiDQoJQ29weS1JdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJFVzclxBcHBEYXRhXExvY2FsXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YVxEZWZhdWx0IiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxFZGdlRGF0YVxEZWZhdWx0IC1SZWN1cnNlDQoJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCRVc3JcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxQcm9maWxlcyIpew0KCQlXcml0ZS1Ib3N0ICJDb3B5aW5nIEZpcmVmb3ggRGF0YSINCgkJQ29weS1JdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJFVzclxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyAtUmVjdXJzZQ0KCQlDb3B5LUl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkVXNyXEFwcERhdGFcUm9hbWluZ1xNb3ppbGxhXEZpcmVmb3hccHJvZmlsZXMuaW5pIiAtRGVzdGluYXRpb24gJERlc3RcJFVzclxGaXJlZm94RGF0YVxwcm9maWxlcy5pbmkNCgl9DQp9DQpmdW5jdGlvbiBQdXRQcm9maWxlKCRVc3IsICRSZXBvLCAkRGVzdFByb2ZpbGUpew0KCSRWYWxpZFBhc3RlUHJvZmlsZXMgPSBAKCkNCgkkRm9sZGVyc1RvUGFzdGUgPSBAKCJSb290Rm9sZGVyc1wqIiwiQ29udGFjdHMiLCJEZXNrdG9wIiwiRG9jdW1lbnRzIiwiRG93bmxvYWRzIiwiRmF2b3JpdGVzIiwiTXVzaWMiLCJQaWN0dXJlcyIsIlZpZGVvcyIpDQoJaWYgKFRlc3QtUGF0aCAkUmVwbyl7DQoJCWlmIChUZXN0LVBhdGggJFJlcG9cJFVzcil7DQoJCQlXcml0ZS1Ib3N0ICJQYXN0aW5nIEhvbWUgRm9sZGVyIENvbnRlbnRzIg0KCQkJR2V0LUNoaWxkSXRlbSAkUmVwb1wkVXNyIHwgRm9yZWFjaC1PYmplY3R7DQoJCQkJaWYoJF8uRGlyZWN0b3J5KXsNCgkJCQkJQ29weS1JdGVtICIkUmVwb1wkVXNyXCRfIiAtRGVzdGluYXRpb24gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcIg0KCQkJCX0NCgkJCX0NCgkJCSRGb2xkZXJzVG9wYXN0ZSB8IEZvcmVhY2gtT2JqZWN0ew0KCQkJCWlmIChbc3RyaW5nXSRfIC1lcSAiUm9vdEZvbGRlcnNcKiIpew0KCQkJCQlXcml0ZS1Ib3N0ICJQYXN0aW5nIEhvbWUgRm9sZGVyIEZvbGRlcnMiDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIlBhc3RpbmcgJF8gRm9sZGVyIg0KCQkJCX0NCgkJCQlQYXN0ZUZpbGVzICIkUmVwbyIgIiRfIg0KCQkJfQ0KCQkJJEN1cnJlbnRQcm9jZXNzZXMgPSAkKChnZXQtd21pb2JqZWN0IHdpbjMyX3Byb2Nlc3MgLWNvbXB1dGVybmFtZSAkKChob3N0bmFtZSkpIHwgU2VsZWN0LU9iamVjdCBQcm9jZXNzTmFtZSkpDQoJCQlpZiAoJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoImNocm9tZS5leGUiKSAtb3IgJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoIm1zZWRnZS5leGUiKSAtb3IgJEN1cnJlbnRQcm9jZXNzZXMuUHJvY2Vzc05hbWUuQ29udGFpbnMoImZpcmVmb3giKSl7DQoJCQkJR2V0LVByb2Nlc3MgLU5hbWUgY2hyb21lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZQ0KCQkJCUdldC1Qcm9jZXNzIC1OYW1lIG1zZWRnZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCgkJCQlHZXQtUHJvY2VzcyAtTmFtZSBmaXJlZm94IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZQ0KCQkJfQ0KCQkJaWYgKFRlc3QtUGF0aCAkUmVwb1wkVXNyXENocm9tZURhdGFcRGVmYXVsdCl7DQoJCQkJV3JpdGUtSG9zdCAiUGFzdGluZyBDaHJvbWUgRGF0YSBGb2xkZXIiDQoJCQkJaWYgKFRlc3QtUGF0aCAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXExvY2FsXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHQiKXsNCgkJCQkJcmVtb3ZlLWl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0IiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQl9DQoJCQkJQ29weS1JdGVtICRSZXBvXCRVc3JcQ2hyb21lRGF0YVxEZWZhdWx0ICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcTG9jYWxcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdCIgLUZvcmNlIC1SZWN1cnNlDQoJCQl9DQoNCgkJCVdyaXRlLUhvc3QgIlBhc3RpbmcgRWRnZSBEYXRhIEZvbGRlciINCgkJCWlmIChUZXN0LVBhdGggIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxMb2NhbFxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGFcRGVmYXVsdCIpew0KCQkJCXJlbW92ZS1pdGVtICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcTG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXERlZmF1bHQiIC1Gb3JjZSAtUmVjdXJzZQ0KCQkJfQ0KCQkJQ29weS1JdGVtICRSZXBvXCRVc3JcRWRnZURhdGFcRGVmYXVsdCAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXExvY2FsXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YVxEZWZhdWx0IiAtRm9yY2UgLVJlY3Vyc2UNCgkJCWlmIChUZXN0LVBhdGggJFJlcG9cJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyl7DQoJCQkJV3JpdGUtSG9zdCAiUGFzdGluZyBGaXJlZm94IERhdGEgRm9sZGVyIg0KCQkJCWlmIChUZXN0LVBhdGggIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxQcm9maWxlcyIpew0KCQkJCQlyZW1vdmUtaXRlbSAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQkJcmVtb3ZlLWl0ZW0gIiRTeXN0ZW1Ecml2ZVxVc2Vyc1wkRGVzdFByb2ZpbGVcQXBwRGF0YVxSb2FtaW5nXE1vemlsbGFcRmlyZWZveFxwcm9maWxlcy5pbmkiIC1Gb3JjZQ0KCQkJCX0NCgkJCQlDb3B5LUl0ZW0gJFJlcG9cJFVzclxGaXJlZm94RGF0YVxQcm9maWxlcyAiJFN5c3RlbURyaXZlXFVzZXJzXCREZXN0UHJvZmlsZVxBcHBEYXRhXFJvYW1pbmdcTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzIiAtRm9yY2UgLVJlY3Vyc2UNCgkJCQlDb3B5LUl0ZW0gJFJlcG9cJFVzclxGaXJlZm94RGF0YVxwcm9maWxlcy5pbmkgICIkU3lzdGVtRHJpdmVcVXNlcnNcJERlc3RQcm9maWxlXEFwcERhdGFcUm9hbWluZ1xNb3ppbGxhXEZpcmVmb3hccHJvZmlsZXMuaW5pIg0KCQkJfQ0KCQl9DQoJCWVsc2V7DQoJCQlXcml0ZS1Ib3N0ICJVc2VyIFByb2ZpbGUgTm90IEZvdW5kISINCgkJCXNsZWVwIDUNCgkJCWV4aXQNCgkJfQ0KCX0NCgllbHNlew0KCQlXcml0ZS1Ib3N0ICJJbnZhbGlkIFNvdXJjZSBQYXRoISINCgkJc2xlZXAgNQ0KCQlleGl0DQoJfQ0KfQ0KI1NUQVJUIEhFUkUNCiRTeXN0ZW1Ecml2ZSA9IChHZXQtV21pT2JqZWN0IFdpbjMyX09wZXJhdGluZ1N5c3RlbSkuU3lzdGVtRHJpdmUNCiRDdXJyZW50VXNlclByaW5jaXBhbCA9IE5ldy1PYmplY3QgU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NQcmluY2lwYWwoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpDQppZiAoW3N0cmluZ10kYXJnc1swXSAtZXEgIi1jIil7DQoJJFVzciA9ICRFbnY6VXNlck5hbWUNCgkkTW9kZSA9ICJjIg0KfQ0KZWxzZWlmIChbc3RyaW5nXSRhcmdzWzBdIC1lcSAiLXAiKXsNCgkkTW9kZSA9ICJwIg0KfQ0KZWxzZWlmIChbc3RyaW5nXSRhcmdzWzBdIC1lcSAiLWgiKXsNCglXcml0ZS1Ib3N0ICJVc2FnZToiDQoJV3JpdGUtSG9zdCAiLlxUaGlzUHJvZ3JhbS5wczEgW09QVElPTlNdIDxQcm9maWxlIHRvIENvcHkgb3IgUGFzdGUgZnJvbT4gPFNvdXJjZSBvciBEZXN0aW5hdGlvbiBQYXRoPiA8UHJvZmlsZSB0byBQYXN0ZSB0bz4iDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgT1BUSU9OUzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgLWMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3B5IFByb2ZpbGUgfHwiDQoJV3JpdGUtSG9zdCAifHwgLXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhc3RlIFByb2ZpbGUgfHwiDQoJV3JpdGUtSG9zdCAifHwgLWggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmludCBUaGlzIFBhZ2UgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJV3JpdGUtSG9zdCAifHwgTk9URTogPFByb2ZpbGUgdG8gUGFzdGUgdG8+IGlzIG9ubHkgdmFsaWQgaW4gUGFzdGUgbW9kZSEgICAgICAgICAgfHwiDQoJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJZXhpdA0KfQ0KZWxzZXsNCgkkTW9kZSA9IFJlYWQtSG9zdCAiV291bGQgeW91IGxpa2UgdG8gY29weSBvciBwYXN0ZSBwcm9maWxlPyAoYyxwKSINCn0NCmlmICgkTW9kZSAtZXEgImMiKXsNCglpZiAoW3N0cmluZ10kYXJnc1sxXSl7DQoJCWlmIChbc3RyaW5nXSRhcmdzWzJdKXsNCgkJCWlmIChUZXN0LVBhdGggJGFyZ3NbMl0pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnMgfCBGb3JlYWNoLU9iamVjdHtpZighKCRfLmRpcmVjdG9yeSkpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucyhbc3RyaW5nXSRhcmdzWzFdKSl7DQoJCQkJCVRha2VQcm9maWxlICRhcmdzWzFdICRhcmdzWzJdDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJc2xlZXAgNQ0KCQkJCQlleGl0DQoJCQkJfQ0KCQkJfQ0KCQkJZWxzZXsNCgkJCQlOZXctSXRlbSAtUGF0aCAkYXJnc1syXSAtSXRlbVR5cGUgIkRpcmVjdG9yeSIgfCBPdXQtTnVsbA0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbMV0pKXsNCgkJCQkJVGFrZVByb2ZpbGUgJFVzciAkYXJnc1syXQ0KCQkJCX0NCgkJCQllbHNlew0KCQkJCQlXcml0ZS1Ib3N0ICJFUlJPUjogSW52YWxpZCBzb3VyY2UgcHJvZmlsZSBzZWxlY3RlZCEiDQoJCQkJCXNsZWVwIDUNCgkJCQkJZXhpdA0KCQkJCX0NCgkJCX0NCgkJfQ0KCQllbHNlew0KCQkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHRoZSBwYXRoIG9mIHRoZSByZXBvc2l0b3J5IHdoZXJlIHlvdSB3aWxsIHN0b3JlIHlvdXIgcHJvZmlsZSINCgkJCWlmIChUZXN0LVBhdGggJFJlcG8pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnMgfCBGb3JlYWNoLU9iamVjdHtpZighKCRfLmRpcmVjdG9yeSkpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucyhbc3RyaW5nXSRhcmdzWzFdKSl7DQoJCQkJCVRha2VQcm9maWxlICRhcmdzWzFdICRSZXBvDQoJCQkJfQ0KCQkJCWVsc2V7DQoJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJc2xlZXAgNQ0KCQkJCQlleGl0DQoJCQkJfQ0KCQkJfQ0KCQkJZWxzZXsNCgkJCQlOZXctSXRlbSAtUGF0aCAkUmVwbyAtSXRlbVR5cGUgIkRpcmVjdG9yeSIgfCBPdXQtTnVsbA0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbMV0pKXsNCgkJCQkJVGFrZVByb2ZpbGUgJGFyZ3NbMV0gJFJlcG8NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQl9DQoJCX0NCgl9DQoJZWxzZXsNCgkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHRoZSBwYXRoIG9mIHRoZSByZXBvc2l0b3J5IHdoZXJlIHlvdSB3aWxsIHN0b3JlIHlvdXIgcHJvZmlsZSINCgkJaWYgKFRlc3QtUGF0aCAkUmVwbyl7DQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRTeXN0ZW1Ecml2ZVxVc2VycyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCVdyaXRlLUhvc3QgIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSINCgkJCSRVc3IgPSBSZWFkLUhvc3QgIldoaWNoIHByb2ZpbGUgd291bGQgeW91IGxpa2UgdG8gY29weT8iDQoJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJFVzcikpew0KCQkJCVRha2VQcm9maWxlICRVc3IgJFJlcG8NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCU5ldy1JdGVtIC1QYXRoICRSZXBvIC1JdGVtVHlwZSAiRGlyZWN0b3J5IiB8IE91dC1OdWxsDQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRTeXN0ZW1Ecml2ZVxVc2VycyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fX0NCgkJCVdyaXRlLUhvc3QgIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSINCgkJCSRVc3IgPSBSZWFkLUhvc3QgIldoaWNoIHByb2ZpbGUgd291bGQgeW91IGxpa2UgdG8gY29weT8iDQoJCQlpZiAoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoJFVzcikpew0KCQkJCVRha2VQcm9maWxlICRVc3IgJFJlcG8NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHByb2ZpbGUgc2VsZWN0ZWQhIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgl9DQp9DQplbHNlaWYgKCRNb2RlIC1lcSAicCIpew0KCWlmIChbc3RyaW5nXSRhcmdzWzFdKXsNCgkJaWYgKFtzdHJpbmddJGFyZ3NbMl0pew0KCQkJaWYgKFtzdHJpbmddJGFyZ3NbM10pew0KCQkJCWlmIChUZXN0LVBhdGggJGFyZ3NbMl0pew0KCQkJCQkkVmFsaWRTb3VyY2VQcm9maWxlcyA9IEAoKQ0KCQkJCQlHZXQtQ2hpbGRpdGVtICRhcmdzWzJdIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXskVmFsaWRTb3VyY2VQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX0NCgkJCQkJaWYgKCEoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoW3N0cmluZ10kYXJnc1sxXSkpKXsNCgkJCQkJCVdyaXRlLUhvc3QgIkVSUk9SOiBJbnZhbGlkIHNvdXJjZSBwcm9maWxlIHNlbGVjdGVkISINCgkJCQkJCXNsZWVwIDUNCgkJCQkJCWV4aXQNCgkJCQkJfQ0KCQkJCQkkVmFsaWREZXN0UHJvZmlsZXMgPSBAKCkNCgkJCQkJR2V0LUNoaWxkaXRlbSAkU3lzdGVtRHJpdmVcVXNlcnNcIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtpZiAoJF8uTmFtZSAtbmUgIlB1YmxpYyIpeyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJCWlmICgkVmFsaWREZXN0UHJvZmlsZXMuQ29udGFpbnMoJGFyZ3NbM10pKXsNCgkJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJGFyZ3NbMl0gJGFyZ3NbM10NCgkJCQkJfQ0KCQkJCQllbHNlew0KCQkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgZGVzdGluYXRpb24gcHJvZmlsZSBzZWxlY3RlZCEiDQoJCQkJCQlzbGVlcCA1DQoJCQkJCQlleGl0DQoJCQkJCX0NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHBhdGghIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQl9DQoJCQllbHNlew0KCQkJCVdyaXRlLUhvc3QgJGFyZ3NbMl0NCgkJCQlpZiAoVGVzdC1QYXRoICRhcmdzWzJdKXsNCgkJCQkJJFZhbGlkU291cmNlUHJvZmlsZXMgPSBAKCkNCgkJCQkJR2V0LUNoaWxkaXRlbSAkYXJnc1syXSB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7JFZhbGlkU291cmNlUHJvZmlsZXMgKz0gJF8uVG9TdHJpbmcoKX19DQoJCQkJCWlmICghKCRWYWxpZFNvdXJjZVByb2ZpbGVzLkNvbnRhaW5zKFtzdHJpbmddJGFyZ3NbMV0pKSl7DQoJCQkJCQlXcml0ZS1Ib3N0ICJFUlJPUjogSW52YWxpZCBzb3VyY2UgcHJvZmlsZSBzZWxlY3RlZC4iDQoJCQkJCQlzbGVlcCA1DQoJCQkJCQlleGl0DQoJCQkJCX0NCgkJCQl9DQoJCQkJZWxzZXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgc291cmNlIHBhdGghIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJGFyZ3NbMl0gJFVzckRlc3QNCgkJCQl9DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCSRSZXBvID0gUmVhZC1Ib3N0ICJFbnRlciBwcm9maWxlIHJlcG9zaXRvcnkgcGF0aCINCgkJCWlmIChUZXN0LVBhdGggJFJlcG8pew0KCQkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQkJR2V0LUNoaWxkaXRlbSAkUmVwbyB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXskVmFsaWRTb3VyY2VQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJaWYgKCEoJFZhbGlkU291cmNlUHJvZmlsZXMuQ29udGFpbnMoW3N0cmluZ10kYXJnc1sxXSkpKXsNCgkJCQkJV3JpdGUtSG9zdCAiRVJST1I6IEludmFsaWQgcHJvZmlsZSBzb3VyY2Ugc2VsZWN0ZWQhIg0KCQkJCQlzbGVlcCA1DQoJCQkJCWV4aXQNCgkJCQl9DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJGFyZ3NbMV0gJFJlcG8gJFVzckRlc3QNCgkJCQl9DQoJCQl9DQoJCX0NCgl9DQoJZWxzZXsNCgkJJFJlcG8gPSBSZWFkLUhvc3QgIkVudGVyIHByb2ZpbGUgcmVwb3NpdG9yeSBwYXRoIg0KCQlpZiAoVGVzdC1QYXRoICRSZXBvKXsNCgkJCSRWYWxpZFNvdXJjZVByb2ZpbGVzID0gQCgpDQoJCQlXcml0ZS1Ib3N0ICI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iDQoJCQlHZXQtQ2hpbGRpdGVtICRSZXBvIHwgRm9yZWFjaC1PYmplY3R7aWYoISgkXy5kaXJlY3RvcnkpKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZFNvdXJjZVByb2ZpbGVzICs9ICRfLlRvU3RyaW5nKCl9fQ0KCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJJFVzclNvdXJjZSA9IFJlYWQtSG9zdCAiV2hpY2ggcHJvZmlsZSB3b3VsZCB5b3UgbGlrZSB0byBwYXN0ZSBmcm9tPyINCgkJCWlmICgkVmFsaWRTb3VyY2VQcm9maWxlcy5Db250YWlucygkVXNyU291cmNlKSl7DQoJCQkJJFZhbGlkRGVzdFByb2ZpbGVzID0gQCgpDQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCUdldC1DaGlsZGl0ZW0gJFN5c3RlbURyaXZlXFVzZXJzXCB8IEZvcmVhY2gtT2JqZWN0e2lmKCEoJF8uZGlyZWN0b3J5KSl7aWYgKCRfLk5hbWUgLW5lICJQdWJsaWMiKXtXcml0ZS1Ib3N0ICRfOyRWYWxpZERlc3RQcm9maWxlcyArPSAkXy5Ub1N0cmluZygpfX19DQoJCQkJV3JpdGUtSG9zdCAiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ig0KCQkJCSRVc3JEZXN0ID0gUmVhZC1Ib3N0ICJXaGljaCBwcm9maWxlIHdvdWxkIHlvdSBsaWtlIHRvIHBhc3RlIHRvPyINCgkJCQlpZiAoJFZhbGlkRGVzdFByb2ZpbGVzLkNvbnRhaW5zKCRVc3JEZXN0KSl7DQoJCQkJCVB1dFByb2ZpbGUgJFVzclNvdXJjZSAkUmVwbyAkVXNyRGVzdA0KCQkJCX0NCgkJCQllbHNlew0KCQkJCQlXcml0ZS1Ib3N0ICJJbnZhbGlkIFNlbGVjdGlvbiEiDQoJCQkJCXNsZWVwIDUNCgkJCQkJZXhpdA0KCQkJCX0NCgkJCX0NCgkJCWVsc2V7DQoJCQkJV3JpdGUtSG9zdCAiSW52YWxpZCBTZWxlY3Rpb24hIg0KCQkJCXNsZWVwIDUNCgkJCQlleGl0DQoJCQl9DQoJCX0NCgkJZWxzZXsNCgkJCVdyaXRlLUhvc3QgIkludmFsaWQgcHJvZmlsZSByZXBvc2l0b3J5IHBhdGghIg0KCQkJc2xlZXAgNQ0KCQkJZXhpdA0KCQl9DQoJfQ0KfQ0KZWxzZXsNCglXcml0ZS1Ib3N0ICJJbnZhbGlkIFNlbGVjdGlvbiEiDQoJc2xlZXAgNQ0KCWV4aXQNCn0NCldyaXRlLUhvc3QgIkRvbmUiDQojRU5EIEhFUkU="; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; Get-Childitem C:\Users | Foreach-Object{if(!($_.directory)){if ($_.Name -ne "Public"){C:\Migrate.ps1 -c $_ W:}}}; net use W: /delete

#Paste User Profile from Network Share
$ProfileToPaste= "PROFILENAME"; $UserToPasteTo = "USERNAME"; $YourUNCPath = "\\MYSERVER\MYSHARE"; $EncodedScript = ""; $DecodedScript = [System.Convert]::FromBase64String($EncodedScript); Set-Content -Path C:\Migrate.ps1 -Value $DecodedScript -Encoding Byte; net use W: $YourUNCPath; C:\Migrate.ps1 -p $ProfileToPaste W: $UserToPasteTo; net use W: /delete
